# -*- coding: utf-8 -*-

"""
/***************************************************************************
 illini_drainage_tools
                                 A QGIS plugin
 Performs Specific Draiange Related Tasks and Analysis on a Site
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-03-15
        copyright            : (C) 2022 by FALASY  Anamelechi
        email                : fvw.services@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'FALASY  Anamelechi'
__date__ = '2022-03-15'
__copyright__ = '(C) 2022 by FALASY  Anamelechi'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import inspect
from qgis.PyQt.QtGui import QIcon

from qgis.core import QgsProcessing
from qgis.core import QgsProcessingAlgorithm
from qgis.core import QgsProcessingMultiStepFeedback
from qgis.core import QgsProcessingParameterRasterLayer
from qgis.core import QgsProcessingParameterFeatureSource
from qgis.core import QgsProcessingParameterFeatureSink
from qgis.core import QgsProcessingParameterFolderDestination
from qgis.core import QgsProcessingParameterBoolean
from qgis.core import QgsProcessingParameterVectorLayer
from qgis.core import QgsProcessingParameterNumber
from qgis.core import QgsProcessingParameterField

import processing
import sys
import csv

from PyQt5 import QtWidgets
from qgis.PyQt.QtCore import QCoreApplication, QVariant

from qgis.core import *
from collections import Counter
import time
import numpy as np

class LidarThinningAnalysisAlgorithm(QgsProcessingAlgorithm):            
        
    def initAlgorithm(self, config=None):        
        self.addParameter(QgsProcessingParameterRasterLayer('IDT', 'Field LiDAR DEM', defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('VectorBound', 'Field Boundary', types=[QgsProcessing.TypeVectorPolygon], defaultValue=None))
        self.addParameter(QgsProcessingParameterNumber('PixelSize', 'Desired Pixel Size (ft)', type=QgsProcessingParameterNumber.Double, maxValue=100.0, defaultValue=20))        
        self.addParameter(QgsProcessingParameterRasterDestination('Resampled', 'Resampled Raster Layer', createByDefault=True, defaultValue=None))
       
        self.addParameter(QgsProcessingParameterFeatureSink('BoundaryProfiles', 'Boundary Points Profile', type=QgsProcessing.TypeVectorAnyGeometry, createByDefault=True, supportsAppend=True, defaultValue=None))      
        self.addParameter(QgsProcessingParameterFeatureSink('InnerPointProfiles', 'Inner Points Profile', type=QgsProcessing.TypeVectorAnyGeometry, createByDefault=True, supportsAppend=True, defaultValue=None))
        self.addParameter(QgsProcessingParameterFeatureSink('MergePoints', 'All Generated Field Points', type=QgsProcessing.TypeVectorAnyGeometry, createByDefault=True, supportsAppend=True, defaultValue=None))  
                                  
    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multistep feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model    
        feedback = QgsProcessingMultiStepFeedback(9, model_feedback)
        results = {}
        outputs = {}               
                      
        # Clip Raster DEM Layer Out        
        alg_params = {'INPUT': parameters['IDT'], 'POLYGONS': parameters['VectorBound'], 'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT}        
                
        outputs['ClipRasterWithPolygon'] = processing.run('saga:cliprasterwithpolygon', alg_params, context=context, feedback=feedback, is_child_algorithm=True) #1
        
        feedback.setCurrentStep(1)
        if feedback.isCanceled():
            return {}
            
        # Resample Clipped Raster DEM      
        alg_params = {'INPUT': outputs['ClipRasterWithPolygon']['OUTPUT'], 'SCALE_UP': 0, 'SCALE_DOWN': 0, 'TARGET_USER_SIZE': parameters['PixelSize'], 'TARGET_USER_FITS': 1, 'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT}
        
        outputs['Resampling'] = processing.run('saga:resampling', alg_params, context=context, feedback=feedback, is_child_algorithm=True) #2                     
        
        feedback.setCurrentStep(2)
        if feedback.isCanceled():
            return {}

        # Convert SAGA to Giff File        
        alg_params = {'INPUT': outputs['Resampling']['OUTPUT'], 'OUTPUT': parameters['Resampled']}               
                
        outputs['Translate'] = processing.run('gdal:translate', alg_params, context=context, feedback=feedback, is_child_algorithm=True) #3
                      
        feedback.setCurrentStep(3)
        if feedback.isCanceled():
            return {}       
                
        # Polygons to Lines        
        alg_params = {'INPUT': parameters['VectorBound'], 'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT}               
                
        outputs['PolygonsToLines'] = processing.run('native:polygonstolines', alg_params, context=context, feedback=feedback, is_child_algorithm=True) #4                
        
        feedback.setCurrentStep(4)
        if feedback.isCanceled():
            return {}
        
        # Generate Points Pixel Centroids along Boundary Line       
        alg_params = {'INPUT_RASTER': parameters['IDT'], 'INPUT_VECTOR': outputs['PolygonsToLines']['OUTPUT'], 'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT}               
                
        outputs['PointsAlongLines'] = processing.run('qgis:generatepointspixelcentroidsalongline', alg_params, context=context, feedback=feedback, is_child_algorithm=True) #5                
        
        feedback.setCurrentStep(5)
        if feedback.isCanceled():
            return {}
        
        # Export Boundary Points Profile to CSV File        
        alg_params = {'INPUT': outputs['PointsAlongLines']['OUTPUT'], 'CRS': 'EPSG4326', 'OUTPUT': parameters['BoundaryProfiles']}               
                
        outputs['AddFields'] = processing.run('native:addxyfields', alg_params, context=context, feedback=feedback, is_child_algorithm=True) #6
                
        feedback.setCurrentStep(6)
        if feedback.isCanceled():
           return {} 
           
        # Convert Pixel Centroid Layer        
        #alg_params = {'INPUT_RASTER': outputs['Resampling']['OUTPUT'], 'RASTER_BAND': 1, 'FIELD_NAME': 'VALUE', 'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT}
        alg_params = {'INPUT_RASTER': outputs['Resampling']['OUTPUT'], 'RASTER_BAND': 1, 'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT}         
                
        outputs['PixelsToPoints'] = processing.run('qgis:pixelstopoints', alg_params, context=context, feedback=feedback, is_child_algorithm=True) #7                
        
        feedback.setCurrentStep(7)
        if feedback.isCanceled():
            return {}                 
                                                  
        # Export Inner Points Profile to CSV File        
        alg_params = {'INPUT': outputs['PixelsToPoints']['OUTPUT'], 'CRS': 'EPSG4326', 'OUTPUT': parameters['InnerPointProfiles']}               
                
        outputs['AddxyFields'] = processing.run('native:addxyfields', alg_params, context=context, feedback=feedback, is_child_algorithm=True) #8
        
        feedback.setCurrentStep(8)
        if feedback.isCanceled():
            return {}            
                
        # Union of Line and Point Layers        
        alg_params = {'INPUT': outputs['PointsAlongLines']['OUTPUT'], 'OVERLAY': outputs['PixelsToPoints']['OUTPUT'], 'OUTPUT': parameters['MergePoints']}               
                
        outputs['Union'] = processing.run('native:union', alg_params, context=context, feedback=feedback, is_child_algorithm=True) #9             
                                             
        results['MergePoints'] = outputs['Union']['OUTPUT']
        return results 

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)
        
    def createInstance(self):
        return LidarThinningAnalysisAlgorithm()
        
    def name(self):
        return '1. LiDARThAn'

    def displayName(self):
        return self.tr(self.name())

    def group(self):
        return self.tr(self.groupId())

    def groupId(self):
        return ''
        
    def icon(self):
        cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]
        icon = QIcon(os.path.join(os.path.join(cmd_folder, 'logo.png')))
        return icon
        
    def shortHelpString(self):
        return self.tr("""This Tool extracts a LiDAR DEM data out using an input boundary layer and then performs specific DEM analysis on the Drainage Site.
        
        Workflow: 
        1. Select a LiDAR DEM Raster Layer and a Polygon Vector Layer. 
        2. Select a Desired Pixel Size (feet) 
        3. Click on \"Run\"
        
        The script will gives out four outputs.         
                               
        The help link in the Graphical User Interface (GUI) provides more information about the plugin.             
        """)    
        
    def helpUrl(self):
        return "http://www.wq.illinois.edu/DG/DrainageGuide.html"         
    